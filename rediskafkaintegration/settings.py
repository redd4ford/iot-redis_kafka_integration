"""
Django settings for rediskafkaintegration project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import redis
import asyncio
from azure.eventhub.aio import EventHubProducerClient
from azure.eventhub import EventData

# Reading .env file
env = environ.Env()
environ.Env.read_env()

# True = write to Kafka/Event Hub, False = write to Console
WRITE_TO_KAFKA = env.bool("WRITE_TO_KAFKA")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
SECRET_KEY = env.str("SECRET_KEY")
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'drf_spectacular',
    'django_injector',
    'api',
]

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rediskafkaintegration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rediskafkaintegration.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'
DATASETS_URL = 'datasets/'

DEFAULT_DATASET = env.str("DEFAULT_DATASET", default=None)

MAX_BATCH_SIZE_IN_BYTES = env.int("MAX_BATCH_SIZE_IN_BYTES", default=262144)

# Batching is required when writing to Kafka, because I am poor and cannot afford Azure.
# If this batch size is not suitable for dataset (e.g. the size of all the data in one batch is
# greater than MAX_BATCH_SIZE_IN_BYTES), the optimal BATCH_SIZE will be calculated by the program.
BATCH_SIZE = 200

# Redis init
REDIS_SERVER = redis.Redis(
    host=env.str("REDIS_HOST_NAME", default=None),
    port=env.int("REDIS_PORT", default=6380),
    db=0,
    password=env.str("REDIS_KEY", default=None),
    ssl=True,
    socket_timeout=100000,
    socket_connect_timeout=100000,
)
try:
    print(f"Redis ping: {REDIS_SERVER.ping()}")
except (redis.exceptions.ConnectionError, ConnectionRefusedError) as ex:
    raise Exception(f"Redis connection not established!, reason={ex}")

# Kafka/Event Hub init
EVENT_HUB_CONNECTION_STRING = env.str("EVENT_HUB_CONNECTION_STRING", default=None)
EVENT_HUB_NAME = env.str("EVENT_HUB_NAME", default=None)

EVENT_HUB = None
if WRITE_TO_KAFKA:
    if not EVENT_HUB_CONNECTION_STRING:
        raise Exception("Event Hub connection string was not provided.")

    EVENT_HUB = EventHubProducerClient.from_connection_string(
        conn_str=EVENT_HUB_CONNECTION_STRING,
        eventhub_name=EVENT_HUB_NAME,
    )
    print("Event Hub connected.")
